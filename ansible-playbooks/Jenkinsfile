pipeline {
    agent any

    parameters {

        string(
            name: 'HOSTNAME',
            description: 'Enter the hostname'
        )

        // Task checkboxes
        booleanParam(
            name: 'SETUP_HOSTNAME',
            description: 'Setup hostname'
        )
        
        booleanParam(
            name: 'CONTAINERIZE_SERVICES',
            description: 'Containerize services'
        )
        
        booleanParam(
            name: 'INSTALL_TELEPORT',
            description: 'Install Teleport'
        )
        
        booleanParam(
            name: 'NGINX_CONFIG',
            description: 'Add reverse proxy to services'
        )
        booleanParam(
            name: 'SETUP_LOGROTATION',
            description: 'Setup logrotation'
        )
        
        booleanParam(
            name: 'SETUP_CRONJOB',
            description: 'Setup cronjob'
        )
        
        base64File description: 'Upload the cronjob file', name: 'CRONJOB_FILE'

    }

    stages {

    stage('Checkout') {
      steps {
        git url: 'https://github.com/user-harshitha/ansible-playbooks.git', branch: 'main'
      }
    }

        stage('Prepare') {
            steps {
                script {
                    // Setup Environmental variables
                    env.ENVIRONMENT                 = params.ENVIRONMENT
                    env.HOSTNAME                    = params.HOSTNAME
                    env.CLIENT                      = params.CLIENT
                    echo "Client: ${params.CLIENT}"
                    echo "Environment: ${params.ENVIRONMENT}"
                    echo "Hostname: ${params.HOSTNAME}"

                    sh 'echo $CRONJOB_FILE | base64 -d'
                    if (params.SETUP_CRONJOB && params.CRONJOB_FILE) {
                        withFileParameter('CRONJOB_FILE'){
                        sh 'cat $CRONJOB_FILE > ansible/cronjob.txt'
                        echo "Cronjob file saved"
                        }

                    } else {
                        echo "Cronjob setup not requested or no file uploaded"
                    }
                }
            }
        }


        stage('Run Ansible Playbooks') {
            steps {
                script {
                     dir('ansible') {
                    // Create inventory file
                    sh 'echo "[target_host]" > inventory.ini'
                    sh "echo \"${params.HOSTNAME}\" >> inventory.ini"

                    // Common extra vars for all playbooks
                    def commonExtraVars = [
                        hostname: params.HOSTNAME
                    ]

                    // Run playbooks based on selected tasks
                    sshagent(credentials: ['ansible_ssh']) {
                    if (params.SETUP_HOSTNAME) {
                        ansiblePlaybook(
                            playbook: 'playbooks/setup_hostname.yml',
                            inventory: 'inventory.ini',
                            extraVars: commonExtraVars + [
                                hostname: params.HOSTNAME
                            ]
                        )
                    }

                    if (params.CONTAINERIZE_SERVICES) {
                        def ContainerInputs = input(
                        message: 'Containerize Services selected. Please enter the following details:',
                        parameters: [
                        choice(name: 'TOMCAT_VERSION', choices: ['Tomcat8','Tomcat9_JDK21', 'Tomcat9_JDK21_PHP-8_3', 'Tomcat11_JDK24'], description: 'Tomcat Version'),
                        choice(name: 'PHP_VERSION', choices: ['PHP-7_JAVA-8','PHP-8_2_JAVA-8', 'PHP-8_3_JAVA-8', 'PHP-8_3_JAVA-21'], description: 'PHP Version'),
                        choice(name: 'MYSQL_VERSION', choices: ['Mysql8'], description: 'MySQL Version')
                            ]
                        )
                        def tomcat_version = ContainerInputs['TOMCAT_VERSION']
                        def php_version = ContainerInputs['PHP_VERSION']
                        def mysql_version = ContainerInputs['MYSQL_VERSION']    

                        def imageMap = [
                        Tomcat8: "harbor.perdix.co/dvara/tomcat8:v2",
                        Tomcat9_JDK21: "harbor.perdix.co/dvara/tomcat:9.0.96-jdk21-v2",
                        Tomcat9_JDK21_PHP_8_3: "harbor.perdix.co/dvara/tomcat:9.0.96-jdk21-php8.3-v2",
                        Tomcat11_JDK24: "harbor.perdix.co/dvara/tomcat:11.04-jdk24",
                        "PHP-7_JAVA-8": "harbor.perdix.co/dvara/java-8-php-fpm-7.0.33-composer:latest",
                        "PHP-8_2_JAVA-8": "harbor.perdix.co/dvara/java-8-php-fpm-8.2-composer:latest",
                        "PHP_8_3_JAVA_8": "harbor.perdix.co/dvara/java-8-php-fpm-8.3-composer:latest",
                        "PHP_8_3_JAVA_21": "harbor.perdix.co/dvara/java-21-php-fpm-8.3-composer:v4",
                        Mysql8: "harbor.perdix.co/dvara/mysql:8.0"
                        ]            
                        // Replace characters to match keys in imageMap
                        def normalize = { it.replaceAll('-', '_').replaceAll('\\.', '_') }        
                        def tomcatKey = normalize(tomcat_version)
                        def phpKey = normalize(php_version)
                        def mysqlKey = normalize(mysql_version)

                        echo "Tomcat Version - ${tomcatKey}"
                        echo "PHP Version - ${phpKey}"
                        echo "MySQL Version - ${mysqlKey}"

                        def tomcatImage = imageMap[tomcatKey]
                        def phpImage = imageMap[phpKey]
                        def mysqlImage = imageMap[mysqlKey]
                        
                        echo "Tomcat Image: ${tomcatImage}"
                        echo "PHP Image: ${phpImage}"
                        echo "MySQL Image: ${mysqlImage}"
                        
                        ansiblePlaybook(
                            playbook: 'playbooks/containerize_services.yml',
                            inventory: 'inventory.ini',
                            extraVars: commonExtraVars + [
                                hostname: params.HOSTNAME,
                                tomcat_image: tomcatImage,
                                php_image: phpImage,
                                mysql_image: mysqlImage
                            ]
                        )
                    }

                    if (params.INSTALL_TELEPORT) {
                        // uncomment if dynamic inputs are required
                        def teleportInputs = input(
                        message: 'Teleport installation selected. Please enter the following details:',
                        parameters: [
                        string(name: 'JOIN_TOKEN', description: 'Teleport join token'),
                        string(name: 'CLIENT', description: 'Client'),
                        string(name: 'ENVIRONMENT', description: 'Environment')
                            ]
                        )

                        def tokenInuput = teleportInputs['JOIN_TOKEN']
                        def clientInput = teleportInputs['CLIENT']
                        def environmentInput = teleportInputs['ENVIRONMENT']
                        ansiblePlaybook(
                            playbook: 'playbooks/install_teleport.yml',
                            inventory: 'inventory.ini',
                            extraVars: commonExtraVars + [
                                join_token: tokenInput,
                                environment: environmentInput,
                                client: clientInput
                            ]
                        )
                    }

                    if (params.NGINX_CONFIG) {
// Step 1: Ask for nginx_config checkbox
def nginxChoice = input(
  message: "Do you want to configure NGINX?",
  parameters: [
    booleanParam(name: 'nginx_config', defaultValue: false, description: 'Check to configure NGINX reverse proxy')
  ]
)

// Step 2: Only show service list if nginx_config was selected
if (nginxChoice == true || nginxChoice["nginx_config"] == true) {
    def selectedServices = input(
        message: "Select services to configure in NGINX",
        parameters: [
            choice(
                name: 'services',
                choices: ["ams-api", "encore", "forms", "kyc-service", "ns", "payment-portal", "perdix-server", "powerbi-service", "docker-php", "form-bulk-downloader", "fs"].join("\n"),
                description: 'Select one or more apps'
            )
        ]
    )

    // Use selectedServices in your playbook
    echo "Selected Services: ${selectedServices}"
}

                            ansiblePlaybook(
                            playbook: 'playbooks/configure_nginx.yml',
                            inventory: 'inventory.ini',
                            extraVars: commonExtraVars + [
                            selected_apps: selectedServices
                            ]
                            )
                    }


                    if (params.SETUP_LOGROTATION) {
                        ansiblePlaybook(
                            playbook: 'playbooks/setup_logrotation.yml',
                            inventory: 'inventory.ini',
                            extraVars: commonExtraVars
                        )
                    }

                    if (params.SETUP_CRONJOB) {
                        ansiblePlaybook(
                            playbook: 'playbooks/setup_cronjob.yml',
                            inventory: 'inventory.ini',
                            extraVars: commonExtraVars + [
                                cronjob_file: 'ansible/cronjob.txt'
                            ]
                        )
                    }
                    }

                  }
                }
            }
        }
  }

   // post {
        //always {
           //cleanWs()
       // }
   //}
}